{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { regionApi } from '../../api/region';\nimport addAxiosHeader from '../../utils/addAxiosHeader';\nconst initialState = {\n  pending: false,\n  success: false,\n  failed: false,\n  message: '',\n  data: []\n};\nconst headers = addAxiosHeader();\nexport const getRegions = createAsyncThunk('get list region', async () => {\n  const res = await regionApi.getData();\n  return res.data;\n});\nexport const getRegionById = createAsyncThunk('Get Region By Id', async params => {\n  const res = await regionApi.getRegionById(params);\n  return res.data;\n});\nexport const createRegion = createAsyncThunk('Create Region', async params => {\n  const res = await regionApi.createRegion(params, {\n    headers\n  });\n  return res.data;\n});\nexport const deleteRegion = createAsyncThunk('Delete Region', async params => {\n  const res = await regionApi.deleteRegion(params, {\n    headers\n  });\n  return res.data;\n});\nconst region = createSlice({\n  name: 'province',\n  initialState,\n  extraReducers: {\n    [getRegions.pending]: state => {\n      state.pending = true;\n      state.success = false;\n      state.failed = false;\n    },\n    [getRegions.fulfilled]: (state, action) => {\n      state.pending = false;\n      state.success = true;\n      state.data = action.payload;\n    },\n    [getRegions.rejected]: (state, action) => {\n      state.pending = false;\n      state.failed = true;\n      state.message = action.error.message;\n    },\n    [getRegionById.fulfilled]: (state, action) => {\n      state.pending = false;\n      state.success = true;\n      state.data = action.payload;\n    },\n    [getRegionById.rejected]: (state, action) => {\n      state.pending = false;\n      state.failed = true;\n      state.message = action.error.message;\n    }\n  }\n});\nexport default region.reducer;","map":{"version":3,"sources":["D:/DacSanVungMienVN/admin/src/store/slice/region.js"],"names":["createAsyncThunk","createSlice","regionApi","addAxiosHeader","initialState","pending","success","failed","message","data","headers","getRegions","res","getData","getRegionById","params","createRegion","deleteRegion","region","name","extraReducers","state","fulfilled","action","payload","rejected","error","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport {regionApi} from '../../api/region';\r\nimport addAxiosHeader from '../../utils/addAxiosHeader';\r\n\r\nconst initialState = {\r\n    pending: false,\r\n    success: false,\r\n    failed: false,\r\n    message: '',\r\n    data: []\r\n};\r\nconst headers=addAxiosHeader();\r\n\r\nexport const getRegions = createAsyncThunk('get list region', async () => {\r\n    const res = await regionApi.getData();\r\n    return res.data;\r\n});\r\n\r\nexport const getRegionById = createAsyncThunk('Get Region By Id', async (params) => {\r\n    const res = await regionApi.getRegionById(params);\r\n    return res.data;\r\n});\r\nexport const createRegion = createAsyncThunk('Create Region', async (params) => {\r\n    const res = await regionApi.createRegion(params,{headers});\r\n\r\n    return res.data;\r\n});\r\n\r\nexport const deleteRegion = createAsyncThunk('Delete Region', async (params) => {\r\n    const res = await regionApi.deleteRegion(params,{headers});\r\n    return res.data;\r\n});\r\n\r\n\r\n\r\nconst region = createSlice({\r\n    name: 'province',\r\n    initialState,\r\n    extraReducers: {\r\n        [getRegions.pending]: (state) => {\r\n            state.pending = true;\r\n            state.success = false;\r\n            state.failed = false;\r\n        },\r\n        [getRegions.fulfilled]: (state, action) => {\r\n            state.pending = false;\r\n            state.success = true;\r\n            state.data = action.payload;\r\n        },\r\n        [getRegions.rejected]: (state, action) => {\r\n            state.pending = false;\r\n            state.failed = true;\r\n            state.message = action.error.message;\r\n        },\r\n        [getRegionById.fulfilled]: (state, action) => {\r\n            state.pending = false;\r\n            state.success = true;\r\n            state.data = action.payload;\r\n        },\r\n        [getRegionById.rejected]: (state, action) => {\r\n            state.pending = false;\r\n            state.failed = true;\r\n            state.message = action.error.message;\r\n        }\r\n    }\r\n});\r\nexport default region.reducer;\r\n"]},"metadata":{},"sourceType":"module"}