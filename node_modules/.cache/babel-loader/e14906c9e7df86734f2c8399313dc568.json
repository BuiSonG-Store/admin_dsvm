{"ast":null,"code":"import _defineProperty from\"C:/Users/SonBui/OneDrive/M\\xE1y t\\xEDnh/dacsanvungmien_frontent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _asyncToGenerator from\"C:/Users/SonBui/OneDrive/M\\xE1y t\\xEDnh/dacsanvungmien_frontent/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";var _extraReducers;import _regeneratorRuntime from\"C:\\\\Users\\\\SonBui\\\\OneDrive\\\\M\\xE1y t\\xEDnh\\\\dacsanvungmien_frontent\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{provinceApi}from'../../api/province';import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';var initialState={pending:false,success:false,failed:false,message:'',data:[]};export var getProvinces=createAsyncThunk('get list province',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return provinceApi.getProvinces(params);case 2:res=_context.sent;return _context.abrupt(\"return\",res.data);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());var provinces=createSlice({name:'province',initialState:initialState,extraReducers:(_extraReducers={},_defineProperty(_extraReducers,getProvinces.pending,function(state){state.pending=true;state.success=false;state.failed=false;}),_defineProperty(_extraReducers,getProvinces.fulfilled,function(state,action){state.pending=false;state.success=true;state.data=action.payload;}),_defineProperty(_extraReducers,getProvinces.rejected,function(state,action){state.pending=false;state.failed=true;state.message=action.error.message;}),_extraReducers)});export default provinces.reducer;","map":{"version":3,"sources":["C:/Users/SonBui/OneDrive/Máy tính/dacsanvungmien_frontent/src/store/slice/province.js"],"names":["provinceApi","createAsyncThunk","createSlice","initialState","pending","success","failed","message","data","getProvinces","params","res","provinces","name","extraReducers","state","fulfilled","action","payload","rejected","error","reducer"],"mappings":"ieAAA,OAASA,WAAT,KAA4B,oBAA5B,CAEA,OAASC,gBAAT,CAA2BC,WAA3B,KAA8C,kBAA9C,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,OAAO,CAAE,KADQ,CAEjBC,OAAO,CAAE,KAFQ,CAGjBC,MAAM,CAAE,KAHS,CAIjBC,OAAO,CAAE,EAJQ,CAKjBC,IAAI,CAAE,EALW,CAArB,CAQA,MAAO,IAAMC,CAAAA,YAAY,CAAGR,gBAAgB,CAAC,mBAAD,0FAAsB,iBAAOS,MAAP,gJAC5CV,CAAAA,WAAW,CAACS,YAAZ,CAAyBC,MAAzB,CAD4C,QACxDC,GADwD,+CAEvDA,GAAG,CAACH,IAFmD,wDAAtB,+DAArC,CAKP,GAAMI,CAAAA,SAAS,CAAGV,WAAW,CAAC,CAC1BW,IAAI,CAAE,UADoB,CAE1BV,YAAY,CAAZA,YAF0B,CAG1BW,aAAa,mDACRL,YAAY,CAACL,OADL,CACe,SAACW,KAAD,CAAW,CAC/BA,KAAK,CAACX,OAAN,CAAgB,IAAhB,CACAW,KAAK,CAACV,OAAN,CAAgB,KAAhB,CACAU,KAAK,CAACT,MAAN,CAAe,KAAf,CACH,CALQ,iCAMRG,YAAY,CAACO,SANL,CAMiB,SAACD,KAAD,CAAQE,MAAR,CAAmB,CACzCF,KAAK,CAACX,OAAN,CAAgB,KAAhB,CACAW,KAAK,CAACV,OAAN,CAAgB,IAAhB,CACAU,KAAK,CAACP,IAAN,CAAaS,MAAM,CAACC,OAApB,CACH,CAVQ,iCAWRT,YAAY,CAACU,QAXL,CAWgB,SAACJ,KAAD,CAAQE,MAAR,CAAmB,CACxCF,KAAK,CAACX,OAAN,CAAgB,KAAhB,CACAW,KAAK,CAACT,MAAN,CAAe,IAAf,CACAS,KAAK,CAACR,OAAN,CAAgBU,MAAM,CAACG,KAAP,CAAab,OAA7B,CACH,CAfQ,iBAHa,CAAD,CAA7B,CAqBA,cAAeK,CAAAA,SAAS,CAACS,OAAzB","sourcesContent":["import { provinceApi } from '../../api/province';\r\n\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    pending: false,\r\n    success: false,\r\n    failed: false,\r\n    message: '',\r\n    data: []\r\n};\r\n\r\nexport const getProvinces = createAsyncThunk('get list province', async (params) => {\r\n    const res = await provinceApi.getProvinces(params);\r\n    return res.data;\r\n});\r\n\r\nconst provinces = createSlice({\r\n    name: 'province',\r\n    initialState,\r\n    extraReducers: {\r\n        [getProvinces.pending]: (state) => {\r\n            state.pending = true;\r\n            state.success = false;\r\n            state.failed = false;\r\n        },\r\n        [getProvinces.fulfilled]: (state, action) => {\r\n            state.pending = false;\r\n            state.success = true;\r\n            state.data = action.payload;\r\n        },\r\n        [getProvinces.rejected]: (state, action) => {\r\n            state.pending = false;\r\n            state.failed = true;\r\n            state.message = action.error.message;\r\n        }\r\n    }\r\n});\r\nexport default provinces.reducer;\r\n"]},"metadata":{},"sourceType":"module"}