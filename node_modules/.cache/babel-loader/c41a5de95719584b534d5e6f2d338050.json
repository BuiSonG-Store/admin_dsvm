{"ast":null,"code":"var _jsxFileName = \"D:\\\\DacSanVungMienVN\\\\dacsanvungmien_frontent\\\\src\\\\components\\\\products\\\\CreateFormImage.js\",\n    _s = $RefreshSig$();\n\nimport { useFormik, Form, FormikProvider } from 'formik'; // material\n\nimport { Button, Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { useState } from 'react';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport { editProductImage, postProductImage } from '../../store/slice/productImage'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateFormImage(props) {\n  _s();\n\n  const [values, setValues] = useState(null);\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      Image: ''\n    },\n    onSubmit: async () => {\n      const formData = new FormData();\n      console.log('run');\n\n      if (props.productEdit) {\n        formData.append('ProductId', props.productEdit);\n      } else {\n        formData.append('ProductId', props.id);\n      }\n\n      console.log(formData.get('ProductId'));\n\n      for (let i = 0; i < values.length; i++) {\n        formData.append('Image', values[i]);\n      }\n\n      try {\n        const res = props.productEdit ? await dispatch(editProductImage(formData)) : await dispatch(postProductImage(formData));\n        unwrapResult(res);\n        props.submitImage({\n          res: res.payload\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  });\n\n  const handleFileChange = e => {\n    setValues(e.target.files);\n  };\n\n  const {\n    isSubmitting,\n    handleSubmit\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      encType: 'multipart/form-data',\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 1,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          component: \"label\",\n          children: [\"Upload File\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"/image/*\",\n            multiple: true,\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n        fullWidth: true,\n        size: \"large\",\n        type: \"submit\",\n        variant: \"contained\",\n        loading: isSubmitting,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateFormImage, \"relJrAgovaXH3tegc+M1TawVSKs=\", false, function () {\n  return [useDispatch, useFormik];\n});\n\n_c = CreateFormImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateFormImage\");","map":{"version":3,"sources":["D:/DacSanVungMienVN/dacsanvungmien_frontent/src/components/products/CreateFormImage.js"],"names":["useFormik","Form","FormikProvider","Button","Stack","LoadingButton","useState","unwrapResult","useDispatch","editProductImage","postProductImage","CreateFormImage","props","values","setValues","dispatch","formik","initialValues","Image","onSubmit","formData","FormData","console","log","productEdit","append","id","get","i","length","res","submitImage","payload","e","handleFileChange","target","files","isSubmitting","handleSubmit"],"mappings":"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","sourcesContent":["import {useFormik, Form, FormikProvider} from 'formik';\r\n// material\r\nimport {\r\n    Button,\r\n    Stack,\r\n} from '@mui/material';\r\nimport {LoadingButton} from '@mui/lab';\r\nimport { useState} from 'react';\r\nimport {unwrapResult} from '@reduxjs/toolkit';\r\nimport {useDispatch} from 'react-redux';\r\nimport {editProductImage, postProductImage} from '../../store/slice/productImage';\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function CreateFormImage(props) {\r\n    const [values, setValues] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            Image: ''\r\n        },\r\n        onSubmit: async () => {\r\n            const formData = new FormData();\r\n            console.log('run');\r\n            if (props.productEdit){\r\n                formData.append('ProductId',props.productEdit );\r\n            }else {\r\n                formData.append('ProductId',props.id );\r\n            }\r\n            console.log(formData.get('ProductId'));\r\n            for (let i = 0; i < values.length; i++) {\r\n                formData.append('Image', values[i]);\r\n            }\r\n            try {\r\n                const res = props.productEdit?await dispatch(editProductImage(formData)) :await dispatch(postProductImage(formData));\r\n                unwrapResult(res);\r\n                props.submitImage({res:res.payload});\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    const handleFileChange = (e) => {\r\n        setValues(e.target.files);\r\n    };\r\n\r\n    const {isSubmitting, handleSubmit} = formik;\r\n\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit} encType={'multipart/form-data'}>\r\n                <Stack spacing={1}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        component=\"label\"\r\n                    >\r\n                        Upload File\r\n                        <input\r\n                            type=\"file\"\r\n                            accept=\"/image/*\"\r\n                            multiple\r\n                            onChange={handleFileChange}\r\n                        />\r\n                    </Button>\r\n                </Stack>\r\n\r\n                <LoadingButton\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    loading={isSubmitting}\r\n                >\r\n                    Submit\r\n                </LoadingButton>\r\n            </Form>\r\n        </FormikProvider>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}